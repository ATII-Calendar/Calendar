[{"/home/amitav/dev/school/cal3/src/index.tsx":"1","/home/amitav/dev/school/cal3/src/reportWebVitals.ts":"2","/home/amitav/dev/school/cal3/src/reducer.ts":"3","/home/amitav/dev/school/cal3/src/contexts/userContext.tsx":"4","/home/amitav/dev/school/cal3/src/App.tsx":"5","/home/amitav/dev/school/cal3/src/components/SignIn.tsx":"6","/home/amitav/dev/school/cal3/src/components/Home.tsx":"7","/home/amitav/dev/school/cal3/src/components/WelcomePage.tsx":"8","/home/amitav/dev/school/cal3/src/components/UserSettings.tsx":"9","/home/amitav/dev/school/cal3/src/services/firebase/firebaseConfig.ts":"10","/home/amitav/dev/school/cal3/src/services/firebase/databaseService.ts":"11","/home/amitav/dev/school/cal3/src/components/Header.tsx":"12","/home/amitav/dev/school/cal3/src/components/event-utils.tsx":"13"},{"size":700,"mtime":1615237266698,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1611598027408,"results":"16","hashOfConfig":"15"},{"size":548,"mtime":1615237279565,"results":"17","hashOfConfig":"15"},{"size":559,"mtime":1615237266698,"results":"18","hashOfConfig":"15"},{"size":1040,"mtime":1615669297898,"results":"19","hashOfConfig":"15"},{"size":1736,"mtime":1615771302227,"results":"20","hashOfConfig":"15"},{"size":8131,"mtime":1615760137730,"results":"21","hashOfConfig":"15"},{"size":2268,"mtime":1615669249038,"results":"22","hashOfConfig":"15"},{"size":3328,"mtime":1615760137730,"results":"23","hashOfConfig":"15"},{"size":610,"mtime":1611799845121,"results":"24","hashOfConfig":"15"},{"size":372,"mtime":1615237266698,"results":"25","hashOfConfig":"15"},{"size":4048,"mtime":1615760137730,"results":"26","hashOfConfig":"15"},{"size":441,"mtime":1612800546381,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1u3yzod",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/amitav/dev/school/cal3/src/index.tsx",[],["59","60"],"/home/amitav/dev/school/cal3/src/reportWebVitals.ts",[],"/home/amitav/dev/school/cal3/src/reducer.ts",[],"/home/amitav/dev/school/cal3/src/contexts/userContext.tsx",[],"/home/amitav/dev/school/cal3/src/App.tsx",[],"/home/amitav/dev/school/cal3/src/components/SignIn.tsx",[],"/home/amitav/dev/school/cal3/src/components/Home.tsx",["61","62"],"import React, { useEffect, useState, useRef } from 'react'\nimport '../styles/Home.css';\nimport FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport iCalendarPlugin from '@fullcalendar/icalendar'\nimport { createEventId } from './event-utils'\nimport { Redirect } from 'react-router-dom'\nimport Header from './Header'\nimport {addUserEvent} from '../services/firebase/databaseService'\nimport { useUserValue } from '../contexts/userContext'\nimport { EventInput } from '@fullcalendar/react'\nimport { db } from '../services/firebase/firebaseConfig';\nimport Button from '@material-ui/core/Button'\nimport AddIcon from '@material-ui/icons/Add';\n\nexport default function Home() {\n  let user: any;\n  let classes: any[];\n  let userState = useUserValue().state;\n  if (userState) {\n    user = userState.user;\n    classes = userState.classes;\n  }\n\n  let calRef = useRef<FullCalendar | null>(null);\n\n  let [weekendsVisible, setWeekendsVisible] = useState(true);\n  let [currentEvents, setCurrentEvents] = useState([]);\n  let [showSidebar, setShowSidebar] = useState(true);\n\n  let [events, setEvents] = useState([]);\n  let [eventsLoaded, setEventsLoaded] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      retrieveEvents().then(events => {\n        // @ts-ignore\n        setEvents([...events, ...calculateCycle()]);\n        // @ts-ignore\n        setCurrentEvents([...events, ...calculateCycle()]);\n        setEventsLoaded(true);\n      });\n    }\n  }, [user]);\n\n  // helper function to take seconds and create a date object\n  function toDateTime(secs: number) {\n      var t = new Date(1970, 0, 1); // Epoch\n      t.setSeconds(secs);\n      return t;\n  }\n\n  // Generating a dummy cycle â€“ ultimately this will be scraped from the RCDS\n  // site or another ical source\n  function calculateCycle() {\n    let cycleDay = 1;\n    let date = new Date();\n    let events = [];\n\n    const blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\n    let cycle = [\n      [0, 1, 2, 3, 8],\n      [4, 5, 6, 7, 8],\n      [2, 0, 1, 3, 8],\n      [6, 4, 5, 7, 8],\n      [1, 2, 0, 3, 8],\n      [5, 6, 4, 7, 8],\n    ]\n\n    let startTimes = [\n      [9, 15], [11, 5], [12, 55], [14, 25], [15, 30]\n    ]\n\n    let endTimes = [\n      [10, 20], [12, 10], [14, 0], [3, 30], [4, 20]\n    ]\n\n    for (let i = 0; i < 14; i++) {\n        if (date.getDay() !== 0 && date.getDay() !== 6) {\n          for (let j = 0; j < 5; j++) {\n            let startTime = new Date(date);\n            startTime.setHours(startTimes[j][0]);\n            startTime.setMinutes(startTimes[j][1]);\n\n            let endTime = new Date(date);\n            endTime.setHours(endTimes[j][0]);\n            endTime.setMinutes(endTimes[j][1]);\n\n            events.push({\n              // the most beautiful expresison you've ever seen:\n              title: classes[cycle[cycleDay-1][j]] ?\n                  `${classes[cycle[cycleDay-1][j]]}` :\n                  `${blocks[cycle[cycleDay-1][j]]} block`,\n              start: startTime,\n              end: endTime,\n              display: 'background',\n            });\n          }\n\n          events.push({\n            allDay: true,\n            title: `Day ${cycleDay}`,\n            start: date,\n          });\n          cycleDay = ((cycleDay++) % 6) + 1;\n        }\n\n        let newDate = new Date(date); newDate.setDate(date.getDate() + 1); date = newDate; }\n    return events;\n  }\n\n  async function retrieveEvents() {\n    let x = 0;\n    let events:EventInput[] = []\n\n    if (user != null) {\n      await db.collection('test_collection').doc(user.uid).collection('events').get()\n        .then((querySnapshot) => {querySnapshot.forEach((doc => {\n          let data = doc.data();\n          events[x] = {\n            id:String(x++), title:String(doc.id),\n            start: toDateTime(data.start.seconds),\n            end: toDateTime(data.end.seconds),\n            allDay: data.allDay\n          }\n        })\n      )})\n    }\n\n    return events;\n  }\n\n  function renderEventContent(eventContent: EventContentArg) {\n    return (\n      <>\n        <b>{eventContent.timeText}</b>\n        <i>{eventContent.event.title}</i>\n      </>\n    )\n  }\n\n  function renderSidebarEvent(event: EventApi) {\n    // no need to render background events, which are typically just the blocks\n    // also no need to render \"day\" events, which will just make the event list\n    // very long for no good reason\n    if (event.display !== 'background' && event.title.substring(0, 3) !== \"Day\") {\n      return (\n        <li key={event.id}>\n          <b>{formatDate(event.start!, {year: 'numeric', month: 'short', day: 'numeric'}) + \" \"}</b>\n          <i>{event.title}</i>\n        </li>\n      )\n    }\n  }\n\n  // definition of the sidebar \n  // maybe move this to its own component\n  function renderSidebar() {\n    return (\n      <>\n        <div className='home-sidebar'>\n          <div className='home-sidebar-section' style={{marginBottom: \"10px\"}}>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              style={{width:\"100%\"}}\n              startIcon={<AddIcon />}\n            >\n              Add Event\n            </Button>\n          </div>\n          <div className='home-sidebar-section'>\n            <h4>My Events</h4>\n            <ul>\n              {currentEvents.map(renderSidebarEvent)}\n            </ul>\n          </div>\n          <div className='home-sidebar-section'>\n            <h4>My Calendars</h4>\n          </div>\n        </div>\n      </>\n    )\n  }\n\n  let handleDateSelect = (selectInfo: DateSelectArg) => {\n    let title = prompt('Please enter a new title for your event')\n    let calendarApi = selectInfo.view.calendar\n\n    calendarApi.unselect() // clear date selection\n\n    if (title) {\n      //let testEvent = new Event(title, new Date(selectInfo.startStr), new Date(selectInfo.endStr), selectInfo.allDay)\n      let testUID = String(user.uid)\n      addUserEvent(testUID, title, new Date(selectInfo.startStr), new Date(selectInfo.endStr), selectInfo.allDay)\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay\n      })\n    }\n  }\n\n  // TODO proper deletions (remove events from the API)\n  let handleEventClick = (clickInfo: EventClickArg) => {\n    if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n      clickInfo.event.remove()\n    }\n  }\n\n  // for when events are added â€“ adds events to local state\n  let handleEvents = (events: any) => {\n    // @ts-ignore\n    setCurrentEvents(null);\n    setCurrentEvents(events)\n  }\n\n  async function getEvents() {\n    return Promise.resolve(events).then(evnts => {\n      return evnts;\n    });\n  }\n\n  return (\n    <> { user ?\n      <div className='home'>\n        <Header showSidebar={showSidebar} setShowSidebar={setShowSidebar} calRef={calRef}/>\n        <div className='home-body'>\n          {showSidebar && renderSidebar()}\n          <div className='home-main'>\n            { eventsLoaded && <FullCalendar\n              plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, iCalendarPlugin]}\n              height=\"100%\"\n              headerToolbar={false}\n              ref={calRef}\n              initialView='dayGridMonth'\n              editable={true}\n              selectable={true}\n              selectMirror={true}\n              dayMaxEvents={true}\n              initialEvents = {getEvents} // alternatively, use the `events` setting to fetch from a feed\n              weekends={weekendsVisible}\n              select={handleDateSelect}\n              eventContent={renderEventContent} // custom render function\n              eventClick={handleEventClick}\n              eventsSet={handleEvents} // called after events are initialized/added/changed/removed\n              handleWindowResize={true}\n            /> }\n          </div>\n        </div>\n      </div> : <Redirect to=\"/signin\"/> } </>\n  )\n}\n","/home/amitav/dev/school/cal3/src/components/WelcomePage.tsx",["63","64"],"// I used this website https://stackoverflow.com/questions/36683770/how-to-get-the-value-of-an-input-field-using-reactjs\n// to figure out how to handle user inputer\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useUserValue } from '../contexts/userContext';\nimport { actionTypes as actions } from '../reducer'\nimport Header from './Header';\n\nconst blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\nexport default function WelcomePage() {\n  let [classList, setClassList] = useState(new Array(blocks.length));\n  let history = useHistory();\n\n  let user: any;\n  let { state, dispatch } = useUserValue();\n  if (state) {\n    user = state.user;\n  }\n\n  function buttonClick() {\n    dispatch({ type: actions.SET_CLASSES, classes: classList });\n    history.push(\"/home\");\n  }\n\n  function classInputted(value: string, index: number){\n    let newClassList = [...classList];\n    newClassList[index] = value;\n    setClassList(newClassList);\n  }\n\n  return (\n    <div>\n      {!user && history.push(\"/signin\") /* go to signin if there is no logged in user */ }\n      <Header />\n      <h1>\n        <h1 style = {{fontSize: 60, textAlign: 'center'}}>Welcome!</h1>\n      </h1>\n      <div>\n        <div style={{textAlign: 'center', marginBottom: '10px'}}>\n          <h4>Enter the class you have during each block. If you have a free, please leave the space blank.</h4>\n          <small>You can always change this later</small>\n        </div>\n        <ul>\n          {blocks.map((block: string, index: number)=>{\n            return (\n              <div style={{textAlign: 'center', margin: '5px'}} key={index}>\n                <span style = {{fontSize: 25, alignSelf: 'center'}}>{block}<a style={{marginRight: '5.0rem'}}></a></span>{\" \"}\n                <input style={{fontSize: 25, padding: '10px', borderWidth: 0, borderBottomWidth: 2}} type=\"text\" placeholder=\"class name\" onChange={item => classInputted(item.target.value, index)}/>\n              </div>\n            )\n          })}\n        </ul>\n        <button className=\"btn btn-primary\" style={{marginLeft: '42%', height: 50, width: 250, textAlign:'center', float: 'initial'}} onClick={() => buttonClick()}>\n            Continue\n        </button>\n      </div>\n    </div>\n  )\n}\n","/home/amitav/dev/school/cal3/src/components/UserSettings.tsx",[],"/home/amitav/dev/school/cal3/src/services/firebase/firebaseConfig.ts",[],"/home/amitav/dev/school/cal3/src/services/firebase/databaseService.ts",["65","66"],"import User from '../../types/User';\nimport Event from '../../types/Event';\nimport { db } from './firebaseConfig';\n\nfunction addUserEvent(uid: string, title: string, startDate:Object, endDate:Object, allDay:Object) {\n  db.collection('test_collection').doc(uid).collection('events').doc(title).set({start:startDate,end:endDate, allDay:allDay})\n}\n\nexport {\n  addUserEvent\n}\n","/home/amitav/dev/school/cal3/src/components/Header.tsx",["67","68","69","70","71","72"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useUserValue } from '../contexts/userContext';\nimport { actionTypes } from '../reducer';\nimport { auth } from '../services/firebase/firebaseConfig';\nimport '../styles/Header.css';\nimport firebase from 'firebase';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Header({ showSidebar, setShowSidebar, calRef }: any): JSX.Element {\n\n  const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  const styles = useStyles();\n\n  let user: firebase.User | null = null;\n  let userState = useUserValue().state;\n  if (userState.user) {\n    user = userState.user;\n  }\n  let [showMenu, setShowMenu] = useState(false);\n  const dispatch = useUserValue().dispatch;\n  const history = useHistory()\n\n\n  function toggleSidebar() {\n    setShowSidebar(!showSidebar);\n  }\n\n  function signOut() {\n    auth.signOut().then(() => {\n      dispatch({type: actionTypes.SET_USER, user: null})\n      history.push(\"/signIn\")\n    }) }\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event: any) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (<>\n    <AppBar position=\"static\" style={{backgroundColor: '#222e51'}}>\n      <Toolbar>\n        {(setShowSidebar) &&\n        <IconButton onClick={toggleSidebar} edge=\"start\" className={styles.menuButton} color=\"inherit\" aria-label=\"menu\">\n          <MenuIcon />\n        </IconButton>}\n        <Typography variant=\"h6\" className={styles.title}>\n          RCDS Calendar\n        </Typography>\n        { user && calRef && calRef.current &&\n        <>\n          <Button\n            onClick={() => {\n              calRef.current.getApi().today();\n            }}\n            style={{ color: 'white', marginLeft: 0, marginRight: '10px', borderColor: 'white'}}\n            variant=\"outlined\"\n          >Today</Button>\n          <Typography variant=\"h6\" className={styles.title}>\n            <IconButton onClick={() => calRef.current.getApi().prevYear()} edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\n              <NavigateBeforeIcon />\n            </IconButton>\n            {months[calRef.current.getApi().getDate().getMonth()] + \", \" + (1900 + calRef.current.getApi().getDate().getYear())}\n            <IconButton onClick={() => calRef.current.getApi().nextYear()} edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\n              <NavigateNextIcon />\n            </IconButton>\n          </Typography>\n        </>\n        }\n\n        { user && <>\n\n        <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} style={{color: \"white\"}}>\n          {user.displayName}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          <MenuItem onClick={() => {\n            history.push(\"/settings\");\n            handleClose();\n          }}>Settings</MenuItem>\n          <MenuItem onClick={handleClose}>Help</MenuItem>\n          <MenuItem onClick={() => {\n            signOut();\n            handleClose();\n          }} style={{color: 'red'}}>Sign Out</MenuItem>\n        </Menu> </> }\n\n      </Toolbar>\n    </AppBar>\n  </>)\n}\n","/home/amitav/dev/school/cal3/src/components/event-utils.tsx",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":29,"column":25,"nodeType":"79","messageId":"80","endLine":29,"endColumn":43},{"ruleId":"81","severity":1,"message":"82","line":46,"column":6,"nodeType":"83","endLine":46,"endColumn":12,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":48,"column":76,"nodeType":"87","endLine":48,"endColumn":111},{"ruleId":"88","severity":1,"message":"89","line":48,"column":76,"nodeType":"87","endLine":48,"endColumn":111},{"ruleId":"77","severity":1,"message":"90","line":1,"column":8,"nodeType":"79","messageId":"80","endLine":1,"endColumn":12},{"ruleId":"77","severity":1,"message":"91","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":13},{"ruleId":"77","severity":1,"message":"92","line":8,"column":10,"nodeType":"79","messageId":"80","endLine":8,"endColumn":14},{"ruleId":"77","severity":1,"message":"93","line":9,"column":10,"nodeType":"79","messageId":"80","endLine":9,"endColumn":18},{"ruleId":"77","severity":1,"message":"94","line":9,"column":20,"nodeType":"79","messageId":"80","endLine":9,"endColumn":23},{"ruleId":"77","severity":1,"message":"95","line":9,"column":25,"nodeType":"79","messageId":"80","endLine":9,"endColumn":31},{"ruleId":"77","severity":1,"message":"96","line":42,"column":8,"nodeType":"79","messageId":"80","endLine":42,"endColumn":16},{"ruleId":"77","severity":1,"message":"97","line":42,"column":18,"nodeType":"79","messageId":"80","endLine":42,"endColumn":29},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"@typescript-eslint/no-unused-vars","'setWeekendsVisible' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'calculateCycle' and 'retrieveEvents'. Either include them or remove the dependency array.","ArrayExpression",["100"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'User' is defined but never used.","'Event' is defined but never used.","'Link' is defined but never used.","'Dropdown' is defined but never used.","'Nav' is defined but never used.","'Navbar' is defined but never used.","'showMenu' is assigned a value but never used.","'setShowMenu' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},"Update the dependencies array to be: [calculateCycle, retrieveEvents, user]",{"range":"103","text":"104"},[1668,1674],"[calculateCycle, retrieveEvents, user]"]