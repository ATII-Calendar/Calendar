[{"/home/amitav/dev/school/cal3/src/index.tsx":"1","/home/amitav/dev/school/cal3/src/reportWebVitals.ts":"2","/home/amitav/dev/school/cal3/src/reducer.ts":"3","/home/amitav/dev/school/cal3/src/contexts/userContext.tsx":"4","/home/amitav/dev/school/cal3/src/App.tsx":"5","/home/amitav/dev/school/cal3/src/components/SignIn.tsx":"6","/home/amitav/dev/school/cal3/src/components/Home.tsx":"7","/home/amitav/dev/school/cal3/src/components/WelcomePage.tsx":"8","/home/amitav/dev/school/cal3/src/components/UserSettings.tsx":"9","/home/amitav/dev/school/cal3/src/services/firebase/firebaseConfig.ts":"10","/home/amitav/dev/school/cal3/src/services/firebase/databaseService.ts":"11","/home/amitav/dev/school/cal3/src/components/Header.tsx":"12","/home/amitav/dev/school/cal3/src/components/event-utils.tsx":"13"},{"size":700,"mtime":1615237266698,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1611598027408,"results":"16","hashOfConfig":"15"},{"size":548,"mtime":1615237279565,"results":"17","hashOfConfig":"15"},{"size":559,"mtime":1615237266698,"results":"18","hashOfConfig":"15"},{"size":1040,"mtime":1615669297898,"results":"19","hashOfConfig":"15"},{"size":1702,"mtime":1615238237157,"results":"20","hashOfConfig":"15"},{"size":7832,"mtime":1615669297898,"results":"21","hashOfConfig":"15"},{"size":2268,"mtime":1615669249038,"results":"22","hashOfConfig":"15"},{"size":1734,"mtime":1615689884593,"results":"23","hashOfConfig":"15"},{"size":610,"mtime":1611799845121,"results":"24","hashOfConfig":"15"},{"size":372,"mtime":1615237266698,"results":"25","hashOfConfig":"15"},{"size":2175,"mtime":1615683050218,"results":"26","hashOfConfig":"15"},{"size":441,"mtime":1612800546381,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1u3yzod",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/amitav/dev/school/cal3/src/index.tsx",[],["59","60"],"/home/amitav/dev/school/cal3/src/reportWebVitals.ts",[],"/home/amitav/dev/school/cal3/src/reducer.ts",[],"/home/amitav/dev/school/cal3/src/contexts/userContext.tsx",[],"/home/amitav/dev/school/cal3/src/App.tsx",[],"/home/amitav/dev/school/cal3/src/components/SignIn.tsx",[],"/home/amitav/dev/school/cal3/src/components/Home.tsx",["61","62","63"],"import React, { useEffect, useState } from 'react'\nimport '../styles/Home.css';\nimport FullCalendar, { EventApi, DateSelectArg, EventClickArg, EventContentArg, formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\nimport iCalendarPlugin from '@fullcalendar/icalendar'\nimport { createEventId } from './event-utils'\nimport { Redirect } from 'react-router-dom'\nimport Header from './Header'\nimport {addUserEvent} from '../services/firebase/databaseService'\nimport { useUserValue } from '../contexts/userContext'\nimport { EventInput } from '@fullcalendar/react'\nimport { db } from '../services/firebase/firebaseConfig';\n\nexport default function Home() {\n  let user: any;\n  let classes: any[];\n  let userState = useUserValue().state;\n  if (userState) {\n    user = userState.user;\n    classes = userState.classes;\n  }\n\n  let [weekendsVisible, setWeekendsVisible] = useState(true);\n  let [currentEvents, setCurrentEvents] = useState([]);\n  let [showSidebar, setShowSidebar] = useState(true);\n\n  let [events, setEvents] = useState([]);\n  let [eventsLoaded, setEventsLoaded] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      retrieveEvents().then(events => {\n        // @ts-ignore\n        setEvents([...events, ...calculateCycle()]);\n        // @ts-ignore\n        setCurrentEvents([...events, ...calculateCycle()]);\n        setEventsLoaded(true);\n      });\n    }\n  }, [user]);\n\n  // helper function to take seconds and create a date object\n  function toDateTime(secs: number) {\n      var t = new Date(1970, 0, 1); // Epoch\n      t.setSeconds(secs);\n      return t;\n  }\n\n  // Generating a dummy cycle â€“ ultimately this will be scraped from the RCDS\n  // site or another ical source\n  function calculateCycle() {\n    let cycleDay = 1;\n    let date = new Date();\n    let events = [];\n\n    const blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\n    let cycle = [\n      [0, 1, 2, 3, 8],\n      [4, 5, 6, 7, 8],\n      [2, 0, 1, 3, 8],\n      [6, 4, 5, 7, 8],\n      [1, 2, 0, 3, 8],\n      [5, 6, 4, 7, 8],\n    ]\n\n    let startTimes = [\n      [9, 15], [11, 5], [12, 55], [14, 25], [15, 30]\n    ]\n\n    let endTimes = [\n      [10, 20], [12, 10], [14, 0], [3, 30], [4, 20]\n    ]\n\n    for (let i = 0; i < 14; i++) {\n        if (date.getDay() !== 0 && date.getDay() !== 6) {\n          for (let j = 0; j < 5; j++) {\n            let startTime = new Date(date);\n            startTime.setHours(startTimes[j][0]);\n            startTime.setMinutes(startTimes[j][1]);\n\n            let endTime = new Date(date);\n            endTime.setHours(endTimes[j][0]);\n            endTime.setMinutes(endTimes[j][1]);\n\n            events.push({\n              // the most beautiful expresison you've ever seen:\n              title: classes[cycle[cycleDay-1][j]] ?\n                  `${classes[cycle[cycleDay-1][j]]}` :\n                  `${blocks[cycle[cycleDay-1][j]]} block`,\n              start: startTime,\n              end: endTime,\n              display: 'background',\n            });\n          }\n\n          events.push({\n            allDay: true,\n            title: `Day ${cycleDay}`,\n            start: date,\n          });\n          cycleDay = ((cycleDay++) % 6) + 1;\n        }\n\n        let newDate = new Date(date);\n        newDate.setDate(date.getDate() + 1);\n        date = newDate;\n      }\n\n    return events;\n  }\n\n  async function retrieveEvents() {\n    let x = 0;\n    let events:EventInput[] = []\n\n    if (user != null) {\n      await db.collection('test_collection').doc(user.uid).collection('events').get()\n        .then((querySnapshot) => {querySnapshot.forEach((doc => {\n          let data = doc.data();\n          events[x] = {\n            id:String(x++), title:String(doc.id),\n            start: toDateTime(data.start.seconds),\n            end: toDateTime(data.end.seconds),\n            allDay: data.allDay\n          }\n        })\n      )})\n    }\n\n    return events;\n  }\n\n  function renderEventContent(eventContent: EventContentArg) {\n    return (\n      <>\n        <b>{eventContent.timeText}</b>\n        <i>{eventContent.event.title}</i>\n      </>\n    )\n  }\n\n  function renderSidebarEvent(event: EventApi) {\n    // no need to render background events, which are typicall just the blocks\n    if (event.display !== 'background' && event.title.substring(0, 3) !== \"Day\") {\n      return (\n        <li key={event.id}>\n          <b>{formatDate(event.start!, {year: 'numeric', month: 'short', day: 'numeric'}) + \" \"}</b>\n          <i>{event.title}</i>\n        </li>\n      )\n    }\n  }\n\n  // definition of the sidebar \n  // maybe move this to its own component\n  function renderSidebar() {\n    return (\n      <>\n        <div className='home-sidebar'>\n          <div className='home-sidebar-section' style={{marginBottom: \"10px\"}}>\n            <button className=\"btn btn-primary btn-block\" style={{width: '100%'}}>Add Event</button>\n          </div>\n          <div className='home-sidebar-section'>\n            <h4>My Events</h4>\n            <ul>\n              {currentEvents.map(renderSidebarEvent)}\n            </ul>\n          </div>\n          <div className='home-sidebar-seciont'>\n            <h4>My Calendars</h4>\n          </div>\n        </div>\n      </>\n    )\n  }\n\n  let handleDateSelect = (selectInfo: DateSelectArg) => {\n    let title = prompt('Please enter a new title for your event')\n    let calendarApi = selectInfo.view.calendar\n\n    calendarApi.unselect() // clear date selection\n\n    if (title) {\n      //let testEvent = new Event(title, new Date(selectInfo.startStr), new Date(selectInfo.endStr), selectInfo.allDay)\n      let testUID = String(user.uid)\n      addUserEvent(testUID, title, new Date(selectInfo.startStr), new Date(selectInfo.endStr), selectInfo.allDay)\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay\n      })\n    }\n  }\n\n  // TODO proper deletions (remove events from the API)\n  let handleEventClick = (clickInfo: EventClickArg) => {\n    if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n      clickInfo.event.remove()\n    }\n  }\n\n  // for when events are added â€“ adds events to local state\n  let handleEvents = (events: any) => {\n    // @ts-ignore\n    setCurrentEvents(null);\n    setCurrentEvents(events)\n  }\n\n  async function getEvents() {\n    return Promise.resolve(events).then(evnts => {\n      return evnts;\n    });\n    // return retrieveEvents().then(events => {\n      // return events;\n    // });\n  }\n\n  return (\n    <> { user ?\n      <div className='home'>\n        <Header/>\n        <div className='home-body'>\n          {showSidebar && renderSidebar()}\n          <div className='home-main'>\n            { eventsLoaded && <FullCalendar\n              plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, iCalendarPlugin]}\n              headerToolbar={{\n                left: 'prev,next today',\n                center: 'title',\n                right: 'dayGridMonth,timeGridWeek,timeGridDay'\n              }}\n\n              initialView='dayGridMonth'\n              editable={true}\n              selectable={true}\n              selectMirror={true}\n              dayMaxEvents={true}\n              initialEvents = {getEvents} // alternatively, use the `events` setting to fetch from a feed\n              weekends={weekendsVisible}\n              select={handleDateSelect}\n              eventContent={renderEventContent} // custom render function\n              eventClick={handleEventClick}\n              eventsSet={handleEvents} // called after events are initialized/added/changed/removed\n            /> }\n          </div>\n        </div>\n      </div> : <Redirect to=\"/signin\"/> } </>\n  )\n}\n","/home/amitav/dev/school/cal3/src/components/WelcomePage.tsx",["64","65"],"// I used this website https://stackoverflow.com/questions/36683770/how-to-get-the-value-of-an-input-field-using-reactjs\n// to figure out how to handle user inputer\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useUserValue } from '../contexts/userContext';\nimport { actionTypes as actions } from '../reducer'\nimport Header from './Header';\n\nconst blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\nexport default function WelcomePage() {\n  let [classList, setClassList] = useState(new Array(blocks.length));\n  let history = useHistory();\n\n  let user: any;\n  let { state, dispatch } = useUserValue();\n  if (state) {\n    user = state.user;\n  }\n\n  function buttonClick() {\n    dispatch({ type: actions.SET_CLASSES, classes: classList });\n    history.push(\"/home\");\n  }\n\n  function classInputted(value: string, index: number){\n    let newClassList = [...classList];\n    newClassList[index] = value;\n    setClassList(newClassList);\n  }\n\n  return (\n    <div>\n      {!user && history.push(\"/signin\") /* go to signin if there is no logged in user */ }\n      <Header />\n      <h1>\n        <h1 style = {{fontSize: 60, textAlign: 'center'}}>Welcome!</h1>\n      </h1>\n      <div>\n        <div style={{textAlign: 'center', marginBottom: '10px'}}>\n          <h4>Enter the class you have during each block. If you have a free, please leave the space blank.</h4>\n          <small>You can always change this later</small>\n        </div>\n        <ul>\n          {blocks.map((block: string, index: number)=>{\n            return (\n              <div style={{textAlign: 'center', margin: '5px'}} key={index}>\n                <span style = {{fontSize: 25, alignSelf: 'center'}}>{block}<a style={{marginRight: '5.0rem'}}></a></span>{\" \"}\n                <input style={{fontSize: 25, padding: '10px', borderWidth: 0, borderBottomWidth: 2}} type=\"text\" placeholder=\"class name\" onChange={item => classInputted(item.target.value, index)}/>\n              </div>\n            )\n          })}\n        </ul>\n        <button className=\"btn btn-primary\" style={{marginLeft: '42%', height: 50, width: 250, textAlign:'center', float: 'initial'}} onClick={() => buttonClick()}>\n            Continue\n        </button>\n      </div>\n    </div>\n  )\n}\n","/home/amitav/dev/school/cal3/src/components/UserSettings.tsx",[],"/home/amitav/dev/school/cal3/src/services/firebase/firebaseConfig.ts",[],"/home/amitav/dev/school/cal3/src/services/firebase/databaseService.ts",["66","67"],"import User from '../../types/User';\nimport Event from '../../types/Event';\nimport { db } from './firebaseConfig';\n\nfunction addUserEvent(uid: string, title: string, startDate:Object, endDate:Object, allDay:Object) {\n  db.collection('test_collection').doc(uid).collection('events').doc(title).set({start:startDate,end:endDate, allDay:allDay})\n}\n\nexport {\n  addUserEvent\n}\n","/home/amitav/dev/school/cal3/src/components/Header.tsx",["68","69","70"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useUserValue } from '../contexts/userContext';\nimport { actionTypes } from '../reducer';\nimport { auth } from '../services/firebase/firebaseConfig';\nimport '../styles/Header.css';\nimport firebase from 'firebase';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Nav, Navbar } from 'react-bootstrap';\n\nexport default function Header({ showSidebar, setShowSidebar }: any): JSX.Element {\n\n  let user: firebase.User | null = null;\n  let userState = useUserValue().state;\n  if (userState.user) {\n    user = userState.user;\n  }\n  let [showMenu, setShowMenu] = useState(false);\n  const dispatch = useUserValue().dispatch;\n  const history = useHistory()\n\n  function toggleSidebar() {\n    setShowSidebar(!showSidebar);\n  }\n\n  function signOut() {\n    auth.signOut().then(() => {\n      dispatch({type: actionTypes.SET_USER, user: null})\n      history.push(\"/signIn\")\n    }) }\n\n  let brandStyles: React.CSSProperties = {\n    color: 'white',\n    textDecoration: 'none',\n    padding: '10px'\n  }\n\n  let listLinkStyles: React.CSSProperties = {\n    textDecoration: 'none'\n  }\n\n  return (\n    <Navbar variant=\"dark\" bg=\"dark\" expand=\"lg\" className=\"d-flex\">\n      <Navbar.Brand><Link to=\"/home\" style={brandStyles}>RCDS Calendar</Link></Navbar.Brand>\n      { user &&\n      <>\n          <Nav className=\"mr-auto\">\n          </Nav>\n\n            <Dropdown className=\"ml-auto\">\n              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                {user.displayName}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item>\n                  <Link to=\"/settings\" style={listLinkStyles}>Settings</Link>\n                </Dropdown.Item>\n                <Dropdown.Item>\n                  <Link to=\"/help\" style={listLinkStyles}>Help</Link>\n                </Dropdown.Item>\n                <Dropdown.Divider />\n                <Dropdown.Item onClick={signOut} style={{color: 'red'}}>Sign Out</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n        { /* </Navbar.Collapse> */ }\n      </>\n      }\n    </Navbar>\n  )\n}\n","/home/amitav/dev/school/cal3/src/components/event-utils.tsx",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":25,"column":25,"nodeType":"77","messageId":"78","endLine":25,"endColumn":43},{"ruleId":"75","severity":1,"message":"79","line":27,"column":21,"nodeType":"77","messageId":"78","endLine":27,"endColumn":35},{"ruleId":"80","severity":1,"message":"81","line":42,"column":6,"nodeType":"82","endLine":42,"endColumn":12,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":48,"column":76,"nodeType":"86","endLine":48,"endColumn":111},{"ruleId":"87","severity":1,"message":"88","line":48,"column":76,"nodeType":"86","endLine":48,"endColumn":111},{"ruleId":"75","severity":1,"message":"89","line":1,"column":8,"nodeType":"77","messageId":"78","endLine":1,"endColumn":12},{"ruleId":"75","severity":1,"message":"90","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":13},{"ruleId":"75","severity":1,"message":"91","line":18,"column":8,"nodeType":"77","messageId":"78","endLine":18,"endColumn":16},{"ruleId":"75","severity":1,"message":"92","line":18,"column":18,"nodeType":"77","messageId":"78","endLine":18,"endColumn":29},{"ruleId":"75","severity":1,"message":"93","line":22,"column":12,"nodeType":"77","messageId":"78","endLine":22,"endColumn":25},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"@typescript-eslint/no-unused-vars","'setWeekendsVisible' is assigned a value but never used.","Identifier","unusedVar","'setShowSidebar' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'calculateCycle' and 'retrieveEvents'. Either include them or remove the dependency array.","ArrayExpression",["96"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'User' is defined but never used.","'Event' is defined but never used.","'showMenu' is assigned a value but never used.","'setShowMenu' is assigned a value but never used.","'toggleSidebar' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},"Update the dependencies array to be: [calculateCycle, retrieveEvents, user]",{"range":"99","text":"100"},[1517,1523],"[calculateCycle, retrieveEvents, user]"]